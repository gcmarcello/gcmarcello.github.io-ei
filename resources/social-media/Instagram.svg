<svg xmlns="http://www.w3.org/2000/svg" viewBox="2.38419e-7 0.460799 6.451 6.451"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <path d="m 3.2256 2.9183 a 0.7681 0.7681 6.7104 1 0 0.7684 0.7681 a 0.7687 0.7687 6.7201 0 0 -0.7684 -0.7681 z m 1.7958 -0.5904 a 0.7776 0.7776 86.5142 0 0 -0.4379 -0.4379 c -0.3024 -0.1194 -1.0224 -0.0926 -1.3579 -0.0926 s -1.0548 -0.0278 -1.3581 0.0926 a 0.7776 0.7776 86.5142 0 0 -0.4379 0.4379 c -0.1192 0.3024 -0.0926 1.0231 -0.0926 1.3584 s -0.0266 1.0551 0.0932 1.3585 a 0.7776 0.7776 86.5142 0 0 0.4379 0.4379 c 0.3024 0.1194 1.0224 0.0926 1.3581 0.0926 s 1.0547 0.0278 1.3579 -0.0926 a 0.7776 0.7776 86.5142 0 0 0.4379 -0.4379 c 0.1202 -0.3024 0.0926 -1.0231 0.0926 -1.3584 s 0.0276 -1.0549 -0.0926 -1.3584 z m -1.7958 2.5393 a 1.1808 1.1808 45 1 1 1.1808 -1.1808 a 1.1794 1.1794 45 0 1 -1.1808 1.1808 z m 1.2295 -2.1355 a 0.2756 0.2756 83.0954 1 1 0.2755 -0.2756 a 0.275 0.275 45 0 1 -0.2749 0.2762 z m 1.3049 -2.2709 h -5.0688 a 0.6912 0.6912 45 0 0 -0.6912 0.6912 v 5.0688 a 0.6912 0.6912 45 0 0 0.6912 0.6912 h 5.0688 a 0.6912 0.6912 45 0 0 0.6912 -0.6912 v -5.0688 a 0.6912 0.6912 45 0 0 -0.6912 -0.6912 z m -0.2465 4.176 c -0.0186 0.3691 -0.1028 0.6961 -0.3722 0.9648 s -0.5962 0.3547 -0.9648 0.3722 c -0.3803 0.0215 -1.5205 0.0215 -1.9008 0 c -0.3691 -0.0186 -0.6949 -0.103 -0.9648 -0.3722 s -0.3547 -0.5964 -0.3722 -0.9648 c -0.0215 -0.3804 -0.0215 -1.5208 0 -1.9008 c 0.0186 -0.3691 0.1018 -0.6961 0.3722 -0.9648 s 0.5972 -0.3537 0.9648 -0.3712 c 0.3803 -0.0215 1.5205 -0.0215 1.9008 0 c 0.3691 0.0186 0.696 0.103 0.9648 0.3722 s 0.3547 0.5964 0.3722 0.9655 c 0.0215 0.379 0.0215 1.5183 0 1.8991 z" fill="#FFF"/>
</svg>